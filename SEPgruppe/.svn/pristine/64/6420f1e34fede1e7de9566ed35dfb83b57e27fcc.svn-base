package kr.or.ddit.works.company.controller;

import java.io.PrintWriter;

import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.works.company.service.CompanyService;

/**
 * 회사 컨트롤러
 * @author JYS
 * @since 2025. 3. 14.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 14.     	JYS	          최초 생성
 *
 * </pre>
 */
@Controller
@RequestMapping("/company")
public class CompanyController {

	@Inject
	CompanyService service;
	
	// provicer의 고객사 관리 - 고객사 전체 목록 조회
	@GetMapping("")
	public String selectListAllCompany(Model model) {
		model.addAttribute("currentPage", "customer"); // detailHeader 동적으로 변경
		return "sep:admin/company/companyList";
	}

	// provider 고객사 관리 - 고객사 상세 조회
	@GetMapping("{companyNo}")
	public String selectCompanyDetail(@PathVariable("companyNo") String companyNo) {
		return "sep:admin/company/companyDetail";
	}

	// 고객사 회원가입
	@GetMapping("new")
	public String insertCompanyFormUI() {
		return "/sepgruppe/company/companyForm";
	}
	
	  // 아이디 중복 확인
    @GetMapping("/checkId")
    public void checkId(@RequestParam("contactId") String contactId, HttpServletResponse response) throws Exception {
        boolean isDuplicate = service.existsByContactId(contactId);
        PrintWriter out = response.getWriter();
        out.print(isDuplicate);
        out.flush();
    }

    // 사업자 등록번호 중복 확인
    @GetMapping("/checkBusinessRegNo")
    public void checkBusinessRegNo(@RequestParam("businessRegNo") String businessRegNo, HttpServletResponse response) throws Exception {
        boolean isDuplicate = service.existsByBusinessRegNo(businessRegNo);
        PrintWriter out = response.getWriter();
        out.print(isDuplicate);
        out.flush();
    }

	@PostMapping("new")
	public String insertCompany() {
		return "redirect:/";
	}

	// 고객사정보 수정폼으로 이동
	@GetMapping("/{companyNo}/edit")
	public String updateCompanyFormUI(@PathVariable("companyNo") String companyNo) {
		return "sep:user/company/companyEdit";
	}

	// 고객사 정보 수정
	@PutMapping("/{companyNo}/edit")
	public String updateCompany(@PathVariable("companyNo") String companyNo) {
		return "sep:company/mypage";
	}

	// 고객사 탈퇴처리 - 비활성화 (소프트 삭제)
	@PutMapping("/{companyNo}/deactivate")
	public String deactivateCompany(@PathVariable("companyNo") String companyNo) {
		// 탈퇴 후, 마이페이지로 리다이렉트
		return "redirect:/company/mypage";
	}

	// 비활성화 고객사 목록 조회
	@GetMapping("/deactiavateList")
	public String selectDeactivatedCompanies(Model model) {
		// 서비스에서 탈퇴된 고객사 목록을 가져옴
		// List<Company> deactivatedCompanies = companyService.getDeactivatedCompanies();
		// model.addAttribute("deactivatedCompanies", deactivatedCompanies);

		return "sep:admin/company/deactivatedCompanyList";  // 탈퇴된 고객사 목록 페이지
	}

	// 일괄 탈퇴 처리 (스케줄러나 관리자 페이지에서 실행)
	@PostMapping("/delete")
	public String bulkDeactivateCompanies() {
		// 서비스에서 일괄 탈퇴 처리 로직 수행
		// companyService.bulkDeactivateCompanies();

		// 일괄 처리 후, 고객사 목록 페이지로 리다이렉트
		return "redirect:/company";
	}
}
